name: Sync Notes from Notes Repository

on:
  schedule:
    - cron: '0 0 * * *'  # 每天0点运行
  push:
    branches:
      - main  # 当主分支有更新时触发

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the NoteDisplay repository (用于存放Jekyll网站的仓库)
      - name: Checkout the NoteDisplay repository
        uses: actions/checkout@v2

      # Step 2: Checkout the Notes repository (需要同步的笔记库)
      - name: Checkout the Notes repository
        uses: actions/checkout@v2
        with:
          repository: coffee8848/Discrete-Math  # 替换为你的笔记库仓库名
          token: ${{ secrets.PAT_TOKEN }}  # 使用 PAT Token 以访问私有仓库

      # Step 3: Copy notes to the NoteDisplay repository
      - name: Copy notes to the NoteDisplay repository
        run: |
          # 创建 _notes 目录
          mkdir -p _notes

          # 输出当前工作目录，检查是否正确
          echo "Current directory: $(pwd)"

          # 检查笔记仓库的文件列表
          echo "Listing files in the repository:"
          ls -R

          # 遍历笔记库中的所有文件夹，按章节结构复制到 _notes 文件夹
          for chapter in $(find . -type d ! -path './.git*'); do  # 排除 .git 目录
            # 输出每个文件夹的路径，便于调试
            echo "Processing chapter: $chapter"

            # 提取章节名称
            chapter_name=$(basename "$chapter")

            # 如果目录下包含 Markdown 文件或图片目录，则处理它
            if [ -d "$chapter" ] && ([ -f "$chapter"/*.md ] || [ -d "$chapter/images" ]); then
              # 创建对应的章节目录
              mkdir -p "_notes/$chapter_name"
              
              # 复制该章节中的所有 md 文件到 _notes 目录
              cp "$chapter"/*.md "_notes/$chapter_name/" || true
              
              # 复制该章节中的所有图片文件到 _notes 目录
              if [ -d "$chapter/images" ]; then
                cp -r "$chapter/images" "_notes/$chapter_name/" || true
              fi
            fi
          done

      # Check if _notes directory exists and contains files
      - name: Check if _notes directory exists
        run: |
          if [ -d "./_notes" ]; then
            echo "Found _notes directory!"
            ls -R ./_notes
          else
            echo "_notes directory not found!"
            exit 1  # 如果没有找到 _notes 目录，退出并报错
          fi

      # Step 4: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.PAT_TOKEN }}  # 使用 PAT Token
          publish_dir: ./_notes  # 指定你要发布的目录
          publish_branch: gh-pages
          # 其他配置项，如果需要，可以启用 force_orphan、exclude_assets 等选项
          force_orphan: true  # 如果想要创建孤立的 `gh-pages` 分支，可以启用此选项
